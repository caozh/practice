public class RoseGroup {
	public int BST(int[] array, int K, int M) {
		int[] m = new int[] {1};
		int i = array.length - 1;
		TreeNode[] root_ = new TreeNode[1];
		for (; i >= 0; i--) {
			insert(array[i], 1, array.length, K, m, root_);
			System.out.println("m: " +  m[0]);
			if (m[0] == M) return i;
		}
		return i;
	}
	
	private void insert(int key, int l, int r, int k, int[] m, TreeNode[] root_) {//TreeNode root) {
		if (root_[0] == null) {
			root_[0] = new TreeNode(key);
			updateM(key, l, r, k, m);
			return;
		}
		TreeNode root = root_[0];
		while (root != null) {
			if (key > root.key) {
				l = root.key + 1;
				if (root.right == null) {
					root.right = new TreeNode(key);
					updateM(key, l, r, k, m);
					break;
				} else {
					root = root.right;
				}
			} else {
				r = root.key - 1;
				if (root.left == null) {
					root.left = new TreeNode(key);
					updateM(key, l, r, k, m);
					break;
				} else {
					root = root.left;
				}
			}
		}
	}
	
	private void updateM(int key, int l, int r, int k, int[] m) {
		if (key - l >= k && r - key >= k) {
			m[0]++;
		} else if (key - l < k && r - key < k) {
			m[0]--;
		}
	}
	
	class TreeNode {
		int key;
		TreeNode left;
		TreeNode right;
		TreeNode(int key) {
			this.key = key;
		}
	}
	
	public static void main(String[] args) {
		RoseGroup a = new RoseGroup();
		int res = a.BST(new int[] {1,2,7,6,4,3,5}, 1, 3);
		System.out.println("Resualt: " + res);
	}
}
